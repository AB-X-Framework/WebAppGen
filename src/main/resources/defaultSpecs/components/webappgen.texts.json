[
  {
    "specs": [{
      "env": "",
      "value": {
        "cancel": "Cancel",
        "ok": "Ok",
        "title": "Delete Text Entry",
        "content": "Do you want to delete this entry?"
      }
    }],
    "name": "webappgen.texts.DeletePopup",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "workingEnv.DeletePopup = self;\n\n$(self.ok).click(()=>{\n    const responseFx = (status)=>{\n            if (status.success){\n                PageContent.closeModal(workingEnv.DeletePopup);\n                workingEnv.renderText();\n            } else {\n                PageContent.showModal(`Cannot delete ${self.key}. ${JSON.stringify(status.error)}`)\n            }\n        };\n    \n    $.ajax({\n        \"type\": 'DELETE',\n        \"url\":`/resources/texts/${workingEnv.textName}/entries/${self.key}`,\n        \"success\":responseFx\n    });\n});\n\nself.setKey=(key)=>{\n    self.key = key;\n}"
    }],
    "type": "okCancelModal"
  },
  {
    "layout": "container",
    "components": [
      {
        "innerId": "SaveText",
        "component": "webappgen.texts.SaveText",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewText",
        "component": "webappgen.texts.NewText",
        "size": "",
        "env": ""
      },
      {
        "innerId": "CloneText",
        "component": "webappgen.texts.CloneText",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "DeleteText",
        "component": "webappgen.texts.DeleteText",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "ConfirmDeleteText",
        "component": "webappgen.texts.ConfirmDeleteText",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "DeletePopup",
        "component": "webappgen.texts.DeletePopup",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "SaveTextConfirm",
        "component": "webappgen.texts.SaveTextConfirm",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewTextModal",
        "component": "webappgen.texts.NewTextModal",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "CloneTextModal",
        "component": "webappgen.texts.CloneTextModal",
        "size": "l12",
        "env": ""
      }
    ],
    "name": "webappgen.texts.MenuPanel",
    "isContainer": true,
    "js": [
      {
        "env": "",
        "value": "$(SaveText).click(()=>{\n    PageContent.openModal(SaveTextConfirm);\n});"
      },
      {
        "env": "",
        "value": "$(NewText).click(()=>{\n    PageContent.openModal(NewTextModal);\n});"
      },
      {
        "env": "",
        "value": "$(CloneText).click(()=>{\n    PageContent.openModal(CloneTextModal);\n});"
      },
      {
        "env": "",
        "value": "$(DeleteText).click(()=>{\n    PageContent.openModal(ConfirmDeleteText);\n})"
      }
    ]
  },
  {
    "layout": "topLayout",
    "components": [
      {
        "innerId": "header",
        "component": "webappgen.home.Header",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "modelContainer",
        "component": "webappgen.texts.TextBody",
        "size": "",
        "env": ""
      }
    ],
    "name": "webappgen.texts.MainTextComponent",
    "isContainer": true,
    "js": []
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "New Text"}
    }],
    "name": "webappgen.texts.ProcessAddText",
    "isContainer": false,
    "js": [],
    "type": "button"
  },
  {
    "layout": "horizontal",
    "components": [
      {
        "innerId": "LeftPanel",
        "component": "webappgen.texts.LeftPanel",
        "size": "l2",
        "env": ""
      },
      {
        "innerId": "RightPanel",
        "component": "webappgen.texts.RightPanel",
        "size": "l10",
        "env": ""
      }
    ],
    "name": "webappgen.texts.TextBody",
    "isContainer": true,
    "js": [
      {
        "env": "",
        "value": "$(LeftPanel.TextsPackage).change(()=>{\n    clearAutocomplete(LeftPanel.TextName);\n    \n    const packageName = $(LeftPanel.TextsPackage).val();\n    if (packageName !== \"\"){\n        $.get(`/resources/packages/texts/${packageName}`,(textsPerPackage)=>{\n            textsPerPackage.forEach((textName)=>{\n                addAutocompleteValue(LeftPanel.TextName,textName)\n            });\n            $(LeftPanel.TextName).val(\"\");\n            $(self.RightPanel.TextContent).val(\"\");\n            $(self.RightPanel.DetailsPanel.Owner).val(\"\");\n            $(self.RightPanel.DetailsPanel.Title).val(\"\");\n            $(self.RightPanel.DetailsPanel.RoleType).val(\"\").formSelect();\n        });\n    }\n});"
      },
      {
        "env": "",
        "value": "workingEnv.currPage = 0;\nworkingEnv.TextBody = self;\n\nworkingEnv.renderText = ()=> {\n    workingEnv.textName = $(LeftPanel.TextName).val();\n    if (workingEnv.textName !== \"\"){\n        $.get(`/resources/texts/${workingEnv.textName}`,(text)=>{\n            workingEnv.updatedText = text;\n            $(self.RightPanel.TextContent).val(text.content);\n            M.textareaAutoResize(self.RightPanel.TextContent);\n            $(self.RightPanel.DetailsPanel.Owner).val(text.owner);\n            $(self.RightPanel.DetailsPanel.Title).val(text.title);\n            $(self.RightPanel.DetailsPanel.RoleType).val(text.role).formSelect();\n        });\n    }\n}\n$(LeftPanel.TextName).change(workingEnv.renderText);"
      },
      {
        "env": "",
        "value": "self.markChanged=()=>{\n    self.LeftPanel.MenuPanel.SaveText.markChanged();\n}\n\n\n$(self.RightPanel.TextContent).on('input',()=>{\n    workingEnv.updatedText.content = $(self.RightPanel.TextContent).val(); \n    self.markChanged();\n});\n \n$(self.RightPanel.DetailsPanel.Owner).on('input',()=>{\n    workingEnv.updatedText.owner = $(self.RightPanel.DetailsPanel.Owner).val(); \n    self.markChanged();\n});\n \n$(self.RightPanel.DetailsPanel.Title).on('input',()=>{\n    workingEnv.updatedText.title = $(self.RightPanel.DetailsPanel.Title).val(); \n    self.markChanged();\n});\n \n$(self.RightPanel.DetailsPanel.RoleType).change(()=>{\n    workingEnv.updatedText.role = $(self.RightPanel.DetailsPanel.RoleType).val(); \n    self.markChanged();\n});"
      }
    ]
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "src": "",
        "values": [],
        "title": "Text Name"
      }
    }],
    "name": "webappgen.texts.TextName",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "workingEnv.TextName = self;"
    }],
    "type": "autocomplete"
  },
  {
    "layout": "horizontal",
    "components": [
      {
        "innerId": "Title",
        "component": "webappgen.texts.Title",
        "size": "l6",
        "env": ""
      },
      {
        "innerId": "Owner",
        "component": "webappgen.texts.Owner",
        "size": "l5",
        "env": ""
      },
      {
        "innerId": "RoleType",
        "component": "webappgen.components.ResourceType",
        "size": "l1",
        "env": ""
      }
    ],
    "name": "webappgen.texts.DetailsPanel",
    "isContainer": true,
    "js": []
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "Clone Text"}
    }],
    "name": "webappgen.texts.CloneText",
    "isContainer": false,
    "js": [],
    "type": "button"
  },
  {
    "layout": "popup",
    "components": [
      {
        "innerId": "CloneTextName",
        "component": "webappgen.texts.CloneTextName",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewTextConfirm",
        "component": "webappgen.texts.NewTextConfirm",
        "size": "l12",
        "env": ""
      }
    ],
    "name": "webappgen.texts.CloneTextModal",
    "isContainer": true,
    "js": [{
      "env": "",
      "value": "$(NewTextConfirm).click(()=>{\n    const name = $(CloneTextName).val();\n    $.post(`/resources/texts`,{\n        \"resource\":JSON.stringify({\n            \"name\":name,\n            \"content\":workingEnv.updatedText.content,\n            \"title\":workingEnv.updatedText.title,\n            \"role\":workingEnv.updatedText.role\n        })\n    },(status)=>{\n       if (status.success){\n           PageContent.closeModal(self);\n           addAutocompleteValue(workingEnv.PackageName,status.package)\n           addAutocompleteValue(workingEnv.TextName,name);\n           workingEnv.renderText();\n       } else {\n           PageContent.showModal(\"Cannot create text\"+JSON.stringify(status.error))\n       }\n    });\n});"
    }]
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "label": "Text",
        "title": "Current Text",
        "content": ""
      }
    }],
    "name": "webappgen.texts.TextContent",
    "isContainer": false,
    "js": [],
    "type": "textarea"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "label": "New text name",
        "title": "Text name",
        "content": ""
      }
    }],
    "name": "webappgen.texts.NewTextName",
    "isContainer": false,
    "js": [],
    "type": "textfield"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "Delete Text"}
    }],
    "name": "webappgen.texts.DeleteText",
    "isContainer": false,
    "js": [],
    "type": "button"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "cancel": "Cancel",
        "ok": "Save",
        "title": "Save Text Values",
        "content": "Are you sure you want to save text values?"
      }
    }],
    "name": "webappgen.texts.SaveTextConfirm",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "$(self.ok).click(()=>{\n    const values = Object.entries(workingEnv.updatedText).map(([key, value]) => ({ key, value }));\n\n   $.post(`/resources/texts`,{\n       \"resource\" : JSON.stringify(workingEnv.updatedText) \n    },(status)=>{\n        if (status.success){\n            PageContent.closeModal(self);\n            workingEnv.renderText();\n            workingEnv.SaveText.markSaved();\n        }else {\n            PageContent.showModal(\"Cannot save values \"+JSON.stringify(status.error));\n        }\n    }); \n});"
    }],
    "type": "okCancelModal"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "Create New Text"}
    }],
    "name": "webappgen.texts.NewTextConfirm",
    "isContainer": false,
    "js": [],
    "type": "button"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "label": "Text owner",
        "title": "Owner",
        "content": ""
      }
    }],
    "name": "webappgen.texts.Owner",
    "isContainer": false,
    "js": [],
    "type": "textfield"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "label": "Text title",
        "title": "Text title",
        "content": ""
      }
    }],
    "name": "webappgen.texts.Title",
    "isContainer": false,
    "js": [],
    "type": "textfield"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "label": "Cloned text name",
        "title": "Cloned text name",
        "content": ""
      }
    }],
    "name": "webappgen.texts.CloneTextName",
    "isContainer": false,
    "js": [],
    "type": "textfield"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "cancel": "Cancel",
        "ok": "Delete",
        "title": "Confirm Delete",
        "content": "Are you sure to delete this text?"
      }
    }],
    "name": "webappgen.texts.ConfirmDeleteText",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "$(self.ok).click(()=>{\n    $.ajax({\n        url: `/resources/texts/${workingEnv.textName}`, // the resource to delete\n        type: 'DELETE',\n        success: (result)=> {\n            if (result.success){\n                location.reload();    \n            }else {\n                PageContent.showModal(\"Cannot delete text \"+JSON.stringify(result.error));\n            }\n            \n        }\n});\n});"
    }],
    "type": "okCancelModal"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "src": "/resources/packages/texts",
        "values": [],
        "title": "Texts Package"
      }
    }],
    "name": "webappgen.texts.TextsPackage",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "workingEnv.PackageName=self;"
    }],
    "type": "autocomplete"
  },
  {
    "layout": "popup",
    "components": [
      {
        "innerId": "NewTextName",
        "component": "webappgen.texts.NewTextName",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewTextConfirm",
        "component": "webappgen.texts.NewTextConfirm",
        "size": "l12",
        "env": ""
      }
    ],
    "name": "webappgen.texts.NewTextModal",
    "isContainer": true,
    "js": [{
      "env": "",
      "value": "$(NewTextConfirm).click(()=>{\n    const name = $(NewTextName).val();\n    $.post(`/resources/texts`,{\n        \"resource\":JSON.stringify({\n            \"name\":name,\n            \"content\":\"New content\",\n            \"title\":\"New text\",\n            \"role\":\"Admin\"\n        })\n    },(status)=>{\n       if (status.success){\n           PageContent.closeModal(self);\n           addAutocompleteValue(workingEnv.PackageName,status.package)\n           addAutocompleteValue(workingEnv.TextName,name);\n           workingEnv.renderText();\n       } else {\n           PageContent.showModal(\"Cannot create text\"+JSON.stringify(status.error))\n       }\n    });\n});"
    }]
  },
  {
    "layout": "horizontal",
    "components": [
      {
        "innerId": "DetailsPanel",
        "component": "webappgen.texts.DetailsPanel",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "TextContent",
        "component": "webappgen.texts.TextContent",
        "size": "l12",
        "env": ""
      }
    ],
    "name": "webappgen.texts.RightPanel",
    "isContainer": true,
    "js": []
  },
  {
    "layout": "vertical",
    "components": [
      {
        "innerId": "TextsPackage",
        "component": "webappgen.texts.TextsPackage",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "TextName",
        "component": "webappgen.texts.TextName",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "MenuPanel",
        "component": "webappgen.texts.MenuPanel",
        "size": "l12",
        "env": ""
      }
    ],
    "name": "webappgen.texts.LeftPanel",
    "isContainer": true,
    "js": []
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "Save Text"}
    }],
    "name": "webappgen.texts.SaveText",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "workingEnv.SaveText=self;\nself.markChanged=()=>{\n    $(self).addClass(PageContent.global.themeUpdated);\n}\n\nself.markSaved=()=>{\n    $(self).removeClass(PageContent.global.themeUpdated);\n}"
    }],
    "type": "button"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "New Text"}
    }],
    "name": "webappgen.texts.NewText",
    "isContainer": false,
    "js": [],
    "type": "button"
  }
]