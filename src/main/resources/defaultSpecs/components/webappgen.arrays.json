[
  {
    "specs": [{
      "env": "",
      "value": {
        "cancel": "Cancel",
        "ok": "Save",
        "title": "Save Array Values",
        "content": "Are you sure you want to save array values?"
      }
    }],
    "name": "webappgen.arrays.SaveArrayConfirm",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "$(self.ok).click(()=>{\n    const values = Object.entries(workingEnv.updatedArray).map(([key, value]) => ({ key, value }));\n\n   $.post(`/resources/arrays/${workingEnv.arrayName}/entries`,{\n       \"values\" : JSON.stringify(values) \n    },(status)=>{\n        if (status.success){\n            PageContent.closeModal(self);\n            workingEnv.renderArray();\n            workingEnv.SaveArray.markSaved();\n        }else {\n            PageContent.showModal(\"Cannot save values \"+JSON.stringify(status.error));\n        }\n    }); \n});"
    }],
    "type": "okCancelModal"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "Add New Entry"}
    }],
    "name": "webappgen.arrays.NewEntryConfirm",
    "isContainer": false,
    "js": [],
    "type": "button"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "New Array"}
    }],
    "name": "webappgen.arrays.ProcessAddArray",
    "isContainer": false,
    "js": [],
    "type": "button"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "Save Array"}
    }],
    "name": "webappgen.arrays.SaveArray",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "workingEnv.SaveArray=self;\nself.markChanged=()=>{\n    $(self).addClass(PageContent.global.themeUpdated);\n}\n\nself.markSaved=()=>{\n    $(self).removeClass(PageContent.global.themeUpdated);\n}"
    }],
    "type": "button"
  },
  {
    "layout": "horizontal",
    "components": [{
      "innerId": "DetailsPanel",
      "component": "webappgen.arrays.DetailsPanel",
      "size": "l12",
      "env": ""
    }],
    "name": "webappgen.arrays.RightPanel",
    "isContainer": true,
    "js": []
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "src": "/resources/packages/arrays",
        "values": [],
        "title": "Arrays Package"
      }
    }],
    "name": "webappgen.arrays.ArraysPackage",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "workingEnv.PackageName=self;"
    }],
    "type": "autocomplete"
  },
  {
    "layout": "popup",
    "components": [
      {
        "innerId": "NewEntryValue",
        "component": "webappgen.arrays.NewEntryValue",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewEntryConfrim",
        "component": "webappgen.arrays.NewEntryConfirm",
        "size": "l12",
        "env": ""
      }
    ],
    "name": "webappgen.arrays.NewEntryModal",
    "isContainer": true,
    "js": [{
      "env": "",
      "value": "$(NewEntryConfrim).click(()=>{\n    const value = $(NewEntryValue).val();\n    $.post(`/resources/arrays/${workingEnv.arrayName}/add`,{\n       value :value\n    },(status)=>{\n        if (status.success){\n            PageContent.closeModal(self);\n            workingEnv.renderArray();\n        }else {\n            PageContent.showModal(\"Cannot add value \"+JSON.stringify(status.error));\n        }\n    });\n});"
    }]
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "label": "Array value",
        "title": "New value",
        "content": ""
      }
    }],
    "name": "webappgen.arrays.NewEntryValue",
    "isContainer": false,
    "js": [],
    "type": "textarea"
  },
  {
    "layout": "topLayout",
    "components": [
      {
        "innerId": "header",
        "component": "webappgen.home.Header",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "modelContainer",
        "component": "webappgen.arrays.ArrayBody",
        "size": "",
        "env": ""
      }
    ],
    "name": "webappgen.arrays.MainArrayComponent",
    "isContainer": true,
    "js": []
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "src": "",
        "content": "Entries"
      }
    }],
    "name": "webappgen.arrays.Label",
    "isContainer": false,
    "js": [],
    "type": "label"
  },
  {
    "layout": "horizontal",
    "components": [{
      "innerId": "DetailsContainer",
      "component": "webappgen.base.div",
      "size": "l12",
      "env": ""
    }],
    "name": "webappgen.arrays.DetailsPanel",
    "isContainer": true,
    "js": []
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": ">"}
    }],
    "name": "webappgen.arrays.Next",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "$(self).click(()=>{\n    workingEnv.currPage+=1;\n    workingEnv.renderNextValues();\n});"
    }],
    "type": "button"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "<"}
    }],
    "name": "webappgen.arrays.Prev",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "$(self).click(()=>{\n    workingEnv.currPage=Math.max( workingEnv.currPage-1,0);\n    workingEnv.renderNextValues();\n});"
    }],
    "type": "button"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "Delete Array"}
    }],
    "name": "webappgen.arrays.DeleteArray",
    "isContainer": false,
    "js": [],
    "type": "button"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "cancel": "Cancel",
        "ok": "Ok",
        "title": "Delete Array Entry",
        "content": "Do you want to delete this entry?"
      }
    }],
    "name": "webappgen.arrays.DeletePopup",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "workingEnv.DeletePopup = self;\n\n$(self.ok).click(()=>{\n    const responseFx = (status)=>{\n            if (status.success){\n                PageContent.closeModal(workingEnv.DeletePopup);\n                workingEnv.renderArray();\n            } else {\n                PageContent.showModal(`Cannot delete ${self.key}. ${JSON.stringify(status.error)}`)\n            }\n        };\n    \n    $.ajax({\n        \"type\": 'DELETE',\n        \"url\":`/resources/arrays/${workingEnv.arrayName}/entries/${self.key}`,\n        \"success\":responseFx\n    });\n});\n\nself.setKey=(key)=>{\n    self.key = key;\n}"
    }],
    "type": "okCancelModal"
  },
  {
    "layout": "vertical",
    "components": [
      {
        "innerId": "ArraysPackage",
        "component": "webappgen.arrays.ArraysPackage",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "ArrayName",
        "component": "webappgen.arrays.ArrayName",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "MenuPanel",
        "component": "webappgen.arrays.MenuPanel",
        "size": "l12",
        "env": ""
      }
    ],
    "name": "webappgen.arrays.LeftPanel",
    "isContainer": true,
    "js": []
  },
  {
    "layout": "popup",
    "components": [
      {
        "innerId": "NewArrayName",
        "component": "webappgen.arrays.NewArrayName",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewArrayConfirm",
        "component": "webappgen.arrays.NewArrayConfirm",
        "size": "l12",
        "env": ""
      }
    ],
    "name": "webappgen.arrays.NewArrayModal",
    "isContainer": true,
    "js": [{
      "env": "",
      "value": "$(NewArrayConfirm).click(()=>{\n    const name = $(NewArrayName).val();\n    $.post(`/resources/arrays/${name}`,(status)=>{\n       if (status.success){\n           PageContent.closeModal(self);\n           addAutocompleteValue(workingEnv.PackageName,status.package)\n           addAutocompleteValue(workingEnv.ArrayName,name);\n       } else {\n           PageContent.showModal(\"Cannot create array\"+JSON.stringify(status.error))\n       }\n    });\n});"
    }]
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "Create New Array"}
    }],
    "name": "webappgen.arrays.NewArrayConfirm",
    "isContainer": false,
    "js": [],
    "type": "button"
  },
  {
    "layout": "container",
    "components": [
      {
        "innerId": "SaveArray",
        "component": "webappgen.arrays.SaveArray",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "Pagination",
        "component": "webappgen.arrays.Pagination",
        "size": "",
        "env": ""
      },
      {
        "innerId": "Label",
        "component": "webappgen.arrays.Label",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewEntry",
        "component": "webappgen.arrays.NewEntry",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewArray",
        "component": "webappgen.arrays.NewArray",
        "size": "",
        "env": ""
      },
      {
        "innerId": "DeleteArray",
        "component": "webappgen.arrays.DeleteArray",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "ConfirmDeleteArray",
        "component": "webappgen.arrays.ConfirmDeleteArray",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewEntryModal",
        "component": "webappgen.arrays.NewEntryModal",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "DeletePopup",
        "component": "webappgen.arrays.DeletePopup",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "SaveArrayConfirm",
        "component": "webappgen.arrays.SaveArrayConfirm",
        "size": "l12",
        "env": ""
      },
      {
        "innerId": "NewArrayModal",
        "component": "webappgen.arrays.NewArrayModal",
        "size": "l12",
        "env": ""
      }
    ],
    "name": "webappgen.arrays.MenuPanel",
    "isContainer": true,
    "js": [
      {
        "env": "",
        "value": "$(SaveArray).click(()=>{\n    PageContent.openModal(SaveArrayConfirm);\n});"
      },
      {
        "env": "",
        "value": "$(NewEntry).click(()=>{\n    PageContent.openModal(NewEntryModal);\n});"
      },
      {
        "env": "",
        "value": "$(NewArray).click(()=>{\n    PageContent.openModal(NewArrayModal);\n});"
      },
      {
        "env": "",
        "value": "$(DeleteArray).click(()=>{\n    PageContent.openModal(ConfirmDeleteArray);\n})"
      }
    ]
  },
  {
    "layout": "horizontal",
    "components": [
      {
        "innerId": "Prev",
        "component": "webappgen.arrays.Prev",
        "size": "",
        "env": ""
      },
      {
        "innerId": "Next",
        "component": "webappgen.arrays.Next",
        "size": "l1",
        "env": ""
      }
    ],
    "name": "webappgen.arrays.Pagination",
    "isContainer": true,
    "js": []
  },
  {
    "layout": "horizontal",
    "components": [
      {
        "innerId": "LeftPanel",
        "component": "webappgen.arrays.LeftPanel",
        "size": "l2",
        "env": ""
      },
      {
        "innerId": "RightPanel",
        "component": "webappgen.arrays.RightPanel",
        "size": "l10",
        "env": ""
      }
    ],
    "name": "webappgen.arrays.ArrayBody",
    "isContainer": true,
    "js": [
      {
        "env": "",
        "value": "$(LeftPanel.ArraysPackage).change(()=>{\n    clearAutocomplete(LeftPanel.ArrayName);\n    \n    const packageName = $(LeftPanel.ArraysPackage).val();\n    if (packageName !== \"\"){\n        $.get(`/resources/packages/arrays/${packageName}`,(arraysPerPackage)=>{\n            arraysPerPackage.forEach((arrayName)=>{\n                addAutocompleteValue(LeftPanel.ArrayName,arrayName)\n            });\n             $(LeftPanel.ArrayName).val(\"\");\n        });\n    }\n});"
      },
      {
        "env": "",
        "value": "workingEnv.currPage = 0;\nworkingEnv.ArrayBody = self;\nworkingEnv.updatedArray = {};\nworkingEnv.entriesPerPage = 10;\nworkingEnv.entryCount=0;\nworkingEnv.renderNextValues = ()=>{\n    if (workingEnv.arrayName === \"\"){\n        return;\n    }\n    App.process(\"webappgen.arrayValues\",{\n        \"array\":workingEnv.arrayName,\n        \"page\":workingEnv.currPage,\n        \"size\":workingEnv.entriesPerPage\n    },(componentSpecs)=>{\n        workingEnv.SaveArray.markSaved();\n        const init = (workingEnv.currPage*workingEnv.entriesPerPage)+1;\n        let end = ((workingEnv.currPage+1)*workingEnv.entriesPerPage);\n        end = Math.min(workingEnv.entryCount,end);\n        $(LeftPanel.MenuPanel.Label).text(`Entries ${init} - ${end} of ${workingEnv.entryCount}`);\n        workingEnv.updatedArray = {};\n        componentSpecs.js = \"\";\n        const output = [];\n        const js =[];\n        PageContent.renderComponent(output, js, componentSpecs);\n        $(RightPanel.DetailsPanel.DetailsContainer).html(output.join(\"\"));\n        M.updateTextFields();\n        PageContent.processJS(js);\n    });\n};\nworkingEnv.renderArray = ()=> {\n    workingEnv.arrayName = $(LeftPanel.ArrayName).val();\n    if (workingEnv.arrayName !== \"\"){\n        $.get(`/resources/arrays/${workingEnv.arrayName}/count`,(total)=>{\n            workingEnv.entryCount = total;\n        });\n        workingEnv.currPage = 0;\n        workingEnv.renderNextValues();\n    }\n}\n$(LeftPanel.ArrayName).change(workingEnv.renderArray);"
      }
    ]
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "src": "",
        "values": [],
        "title": "Array Name"
      }
    }],
    "name": "webappgen.arrays.ArrayName",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "workingEnv.ArrayName = self;"
    }],
    "type": "autocomplete"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "label": "New array name",
        "title": "Array name",
        "content": ""
      }
    }],
    "name": "webappgen.arrays.NewArrayName",
    "isContainer": false,
    "js": [],
    "type": "textfield"
  },
  {
    "specs": [{
      "env": "",
      "value": {
        "cancel": "Cancel",
        "ok": "Delete",
        "title": "Confirm Delete",
        "content": "Are you sure to delete this array?"
      }
    }],
    "name": "webappgen.arrays.ConfirmDeleteArray",
    "isContainer": false,
    "js": [{
      "env": "",
      "value": "$(self.ok).click(()=>{\n    $.ajax({\n        url: `/resources/arrays/${workingEnv.arrayName}`, // the resource to delete\n        type: 'DELETE',\n        success: (result)=> {\n            if (result.success){\n                location.reload();    \n            }else {\n                PageContent.showModal(\"Cannot delete array \"+JSON.stringify(result.error));\n            }\n            \n        }\n});\n});"
    }],
    "type": "okCancelModal"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "New Array"}
    }],
    "name": "webappgen.arrays.NewArray",
    "isContainer": false,
    "js": [],
    "type": "button"
  },
  {
    "specs": [{
      "env": "",
      "value": {"title": "New Entry"}
    }],
    "name": "webappgen.arrays.NewEntry",
    "isContainer": false,
    "js": [],
    "type": "button"
  }
]